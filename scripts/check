#!/usr/bin/escript

main(Args) ->
    argparse:run(Args, cli(), #{progname => "Equivalence checker"}).

cli() ->
    #{
      arguments => [
                    #{name => mode, type => string, default => "none"},
                    #{name => json, type => boolean, short => $j, long => "-json", default => false}
                   ],
      handler =>
      fun (#{mode := Mode, json := Json}) ->
              net_kernel:start(master, #{name_domain => shortnames}),
              ets:new(stat, [named_table, protected, set, {keypos, 1}]),
              ets:insert(stat, {counts, []}),
              case Mode of
                  "db" ->
                      debugger:quick(check_equiv, check_equiv, ["master^", "master"]);
                  "stats" ->
                      {Res, Failed} = check_equiv:check_equiv("master^", "master"),
                      utils:statistics(),
                      NumOfFail = length(Failed),
                      NumOfSuccess = length(Res),
                      io:format("~p failed out of ~p~n", [NumOfFail, NumOfSuccess]);
                  "none" ->
                      Res = check_equiv:check_equiv("master^", "master"),
                      utils:show_result(Res, Json)
              end,
              ets:delete(stat)
      end
     }.
